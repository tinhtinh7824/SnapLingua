import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../../data/models/vocabulary_model.dart';
import '../../../data/services/realm_service.dart';

class VocabularyListController extends GetxController {
  static VocabularyListController get to => Get.find();

  // Category info
  String categoryId = '';
  String categoryName = 'T·ª´ v·ª±ng';

  // Vocabulary list
  final _vocabularies = <Vocabulary>[].obs;
  final _userVocabularies = <UserVocabulary>[].obs;
  final _isLoading = false.obs;

  // Index ƒë·ªÉ tra nhanh O(1) thay v√¨ O(N)
  final Map<String, UserVocabulary> _userVocabIndex = {};

  List<Vocabulary> get vocabularies => _vocabularies;
  List<UserVocabulary> get userVocabularies => _userVocabularies;
  bool get isLoading => _isLoading.value;

  @override
  void onInit() {
    super.onInit();

    // L·∫•y th√¥ng tin category t·ª´ arguments
    final args = Get.arguments;
    if (args != null) {
      categoryId = args['categoryId'] ?? '';
      categoryName = args['categoryName'] ?? 'T·ª´ v·ª±ng';
    }
  }

  @override
  void onReady() {
    super.onReady();
    // Load vocabularies sau khi build xong
    // Ch·∫°y async ƒë·ªÉ kh√¥ng block UI thread
    WidgetsBinding.instance.addPostFrameCallback((_) {
      loadVocabularies();
    });
  }

  /// Load danh s√°ch t·ª´ v·ª±ng theo category
  Future<void> loadVocabularies() async {
    print('üîµ START: Loading vocabularies for category: $categoryName');

    // Set loading true FIRST
    _isLoading.value = true;

    try {
      // Check if RealmService exists
      if (!Get.isRegistered<RealmService>()) {
        print('‚ùå RealmService not registered');
        return;
      }

      print('‚úÖ RealmService registered');

      final realm = RealmService.to.realm;
      if (realm == null) {
        print('‚ùå Realm instance is null');
        return;
      }

      print('‚úÖ Realm instance OK');

      // Query vocabularies - s·ª≠ d·ª•ng lazy query kh√¥ng toList() ngay
      print('üîç Querying vocabularies...');

      // Query v·ªõi limit ƒë·ªÉ tr√°nh load h·∫øt
      final vocabsQuery = realm.query<Vocabulary>(
        'category == \$0 AND isActive == true LIMIT(100)',
        [categoryName]
      );

      // ƒê·ªçc t·ª´ng ph·∫ßn, kh√¥ng .toList() to√†n b·ªô
      final vocabs = <Vocabulary>[];
      for (final vocab in vocabsQuery) {
        vocabs.add(vocab);
        // Yield ƒë·ªÉ tr√°nh block UI thread qu√° l√¢u
        if (vocabs.length % 20 == 0) {
          await Future.delayed(Duration.zero);
        }
      }

      print('‚úÖ Found ${vocabs.length} vocabularies');
      _vocabularies.value = vocabs;

      if (vocabs.isNotEmpty) {
        final vocabularyIds = vocabs.map((e) => e.id).toSet();
        const userId = 'current_user_id';

        print('üîç Querying user vocabularies...');

        // Query user vocabs c·ªßa user n√†y, sau ƒë√≥ filter trong memory
        final userVocabsQuery = realm.query<UserVocabulary>(
          'userId == \$0 LIMIT(1000)',
          [userId]
        );

        final filtered = <UserVocabulary>[];
        int count = 0;
        for (final uv in userVocabsQuery) {
          // Ch·ªâ gi·ªØ l·∫°i nh·ªØng t·ª´ thu·ªôc ch·ªß ƒë·ªÅ n√†y
          if (vocabularyIds.contains(uv.vocabularyId)) {
            filtered.add(uv);
          }
          // Yield m·ªói 20 items ƒë·ªÉ tr√°nh block UI thread
          count++;
          if (count % 20 == 0) {
            await Future.delayed(Duration.zero);
          }
        }

        print('‚úÖ Found ${filtered.length} relevant user vocabularies');
        _userVocabularies.value = filtered;

        // X√¢y index O(1)
        _userVocabIndex.clear();
        for (final uv in filtered) {
          _userVocabIndex[uv.vocabularyId] = uv;
        }

        print('‚úÖ Index built successfully');
      }

    } catch (e, stackTrace) {
      print('‚ùå Error loading vocabularies: $e');
      print('Stack: $stackTrace');
    } finally {
      _isLoading.value = false;
      print('üèÅ END: Loading completed');
    }
  }

  /// L·∫•y tr·∫°ng th√°i h·ªçc c·ªßa m·ªôt t·ª´ - O(1) lookup
  String getWordStatus(String vocabularyId) {
    return _userVocabIndex[vocabularyId]?.status ?? 'new';
  }

  /// Ph√°t √¢m t·ª´
  Future<void> playPronunciation(String audioUrl) async {
    // TODO: Implement audio player
    // Use audioplayers package
    Get.snackbar(
      'Ph√°t √¢m',
      'ƒêang ph√°t √¢m...',
      snackPosition: SnackPosition.BOTTOM,
      duration: const Duration(seconds: 1),
    );
  }

  /// ƒê√°nh d·∫•u t·ª´ l√† y√™u th√≠ch
  Future<void> toggleFavorite(String vocabularyId) async {
    try {
      final realm = RealmService.to.realm;
      if (realm == null) {
        throw Exception('Realm not initialized');
      }

      const userId = 'current_user_id'; // TODO: Replace with actual userId

      final userVocab = realm.query<UserVocabulary>(
        'userId == \$0 AND vocabularyId == \$1',
        [userId, vocabularyId]
      ).firstOrNull;

      if (userVocab != null) {
        realm.write(() {
          userVocab.isFavorite = !userVocab.isFavorite;
        });

        // C·∫≠p nh·∫≠t index
        _userVocabIndex[vocabularyId] = userVocab;

        // C·∫≠p nh·∫≠t list ƒë·ªÉ Obx rebuild m·ª•c ƒë√≥
        final index = _userVocabularies.indexWhere(
          (e) => e.vocabularyId == vocabularyId
        );
        if (index != -1) {
          _userVocabularies[index] = userVocab;
        }

        Get.snackbar(
          'Th√†nh c√¥ng',
          'ƒê√£ c·∫≠p nh·∫≠t y√™u th√≠ch',
          snackPosition: SnackPosition.BOTTOM,
          duration: const Duration(seconds: 1),
        );
      }
    } catch (e) {
      Get.snackbar(
        'L·ªói',
        'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t: $e',
        snackPosition: SnackPosition.BOTTOM,
      );
    }
  }

  /// X√≥a t·ª´ kh·ªèi danh s√°ch h·ªçc
  Future<void> deleteWord(String vocabularyId) async {
    try {
      final confirmed = await Get.dialog<bool>(
        AlertDialog(
          title: const Text('X√°c nh·∫≠n'),
          content: const Text('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·ª´ n√†y?'),
          actions: [
            TextButton(
              onPressed: () => Get.back(result: false),
              child: const Text('H·ªßy'),
            ),
            TextButton(
              onPressed: () => Get.back(result: true),
              child: const Text('X√≥a', style: TextStyle(color: Colors.red)),
            ),
          ],
        ),
      );

      if (confirmed == true) {
        final realm = RealmService.to.realm;
        if (realm == null) {
          throw Exception('Realm not initialized');
        }

        const userId = 'current_user_id'; // TODO: Replace with actual userId

        final userVocab = realm.query<UserVocabulary>(
          'userId == \$0 AND vocabularyId == \$1',
          [userId, vocabularyId]
        ).firstOrNull;

        if (userVocab != null) {
          realm.write(() {
            realm.delete(userVocab);
          });

          // X√≥a kh·ªèi index
          _userVocabIndex.remove(vocabularyId);

          // X√≥a kh·ªèi list ƒë·ªÉ Obx rebuild
          _userVocabularies.removeWhere(
            (e) => e.vocabularyId == vocabularyId
          );

          Get.snackbar(
            'Th√†nh c√¥ng',
            'ƒê√£ x√≥a t·ª´ kh·ªèi danh s√°ch h·ªçc',
            snackPosition: SnackPosition.BOTTOM,
            duration: const Duration(seconds: 1),
          );
        }
      }
    } catch (e) {
      Get.snackbar(
        'L·ªói',
        'Kh√¥ng th·ªÉ x√≥a: $e',
        snackPosition: SnackPosition.BOTTOM,
      );
    }
  }

  /// Th√™m t·ª´ m·ªõi
  void addNewWord() {
    Get.snackbar(
      'Th√¥ng b√°o',
      'T√≠nh nƒÉng th√™m t·ª´ ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn',
      snackPosition: SnackPosition.BOTTOM,
    );
    // TODO: Navigate to add word screen
  }

  /// M·ªü flashcard
  void openFlashcard() {
    Get.snackbar(
      'Flashcard',
      'ƒêang m·ªü Flashcard mode...',
      snackPosition: SnackPosition.BOTTOM,
    );
    // TODO: Navigate to flashcard screen with this category
    // Get.toNamed(Routes.FLASHCARD, arguments: {
    //   'categoryId': categoryId,
    //   'vocabularies': vocabularies,
    // });
  }

  /// Hi·ªÉn th·ªã menu options cho t·ª´
  void showWordOptions(Vocabulary vocab) {
    Get.bottomSheet(
      Container(
        padding: const EdgeInsets.all(20),
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.favorite_border),
              title: const Text('Th√™m v√†o y√™u th√≠ch'),
              onTap: () {
                Get.back();
                toggleFavorite(vocab.id);
              },
            ),
            ListTile(
              leading: const Icon(Icons.edit),
              title: const Text('Ch·ªânh s·ª≠a'),
              onTap: () {
                Get.back();
                Get.snackbar('Th√¥ng b√°o', 'T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn');
              },
            ),
            ListTile(
              leading: const Icon(Icons.delete, color: Colors.red),
              title: const Text('X√≥a', style: TextStyle(color: Colors.red)),
              onTap: () {
                Get.back();
                deleteWord(vocab.id);
              },
            ),
          ],
        ),
      ),
    );
  }
}
