import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:image_picker/image_picker.dart';
import 'package:image/image.dart' as img;
import 'package:path_provider/path_provider.dart';
import '../../../core/utils/platform_detector.dart';
import '../../../routes/app_pages.dart';
import '../views/custom_camera_view.dart';

class CameraDetectionController extends GetxController {
  static CameraDetectionController get to => Get.find();

  final _image = Rxn<File>();
  final _isLoading = false.obs;
  final ImagePicker _picker = ImagePicker();

  File? get image => _image.value;
  bool get isLoading => _isLoading.value;

  /// Ch·ª•p ·∫£nh t·ª´ camera v·ªõi khung vu√¥ng
  Future<void> takePhoto() async {
    try {
      // Open custom camera with square frame
      final result = await Get.to<String>(() => const CustomCameraView());

      if (result != null) {
        print('üì∑ ƒê√£ ch·ª•p ·∫£nh: $result');
        // Crop ·∫£nh th√†nh h√¨nh vu√¥ng programmatically
        await _cropImageToSquare(result);
      } else {
        print('‚ùå Ng∆∞·ªùi d√πng h·ªßy ch·ª•p ·∫£nh');
      }
    } catch (e) {
      print('‚ùå L·ªói khi ch·ª•p ·∫£nh: $e');
      _showError('Kh√¥ng th·ªÉ ch·ª•p ·∫£nh: $e');
    }
  }

  /// Ch·ªçn ·∫£nh t·ª´ th∆∞ vi·ªán
  Future<void> pickFromGallery() async {
    try {
      final XFile? pickedFile = await _picker.pickImage(
        source: ImageSource.gallery,
        imageQuality: 85,
      );

      if (pickedFile != null) {
        print('üñºÔ∏è ƒê√£ ch·ªçn ·∫£nh: ${pickedFile.path}');
        // Crop ·∫£nh th√†nh h√¨nh vu√¥ng programmatically
        await _cropImageToSquare(pickedFile.path);
      } else {
        print('‚ùå Ng∆∞·ªùi d√πng h·ªßy ch·ªçn ·∫£nh');
      }
    } catch (e) {
      print('‚ùå L·ªói khi ch·ªçn ·∫£nh: $e');
      _showError('Kh√¥ng th·ªÉ ch·ªçn ·∫£nh: $e');
    }
  }

  /// Crop ·∫£nh th√†nh h√¨nh vu√¥ng (center crop)
  Future<void> _cropImageToSquare(String imagePath) async {
    try {
      print('‚úÇÔ∏è ƒêang crop ·∫£nh th√†nh h√¨nh vu√¥ng...');

      // Read image
      final bytes = await File(imagePath).readAsBytes();
      img.Image? image = img.decodeImage(bytes);

      if (image == null) {
        _showError('Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh');
        return;
      }

      // Calculate square size (use smaller dimension)
      final size = image.width < image.height ? image.width : image.height;

      // Calculate crop position (center)
      final x = (image.width - size) ~/ 2;
      final y = (image.height - size) ~/ 2;

      // Crop to square
      final cropped = img.copyCrop(image, x: x, y: y, width: size, height: size);

      // Save cropped image
      final tempDir = await getTemporaryDirectory();
      final croppedPath = '${tempDir.path}/cropped_${DateTime.now().millisecondsSinceEpoch}.jpg';
      final croppedFile = File(croppedPath);
      await croppedFile.writeAsBytes(img.encodeJpg(cropped, quality: 85));

      _image.value = croppedFile;
      print('‚úÇÔ∏è ƒê√£ crop ·∫£nh: $croppedPath');

      await _uploadAndDetect();
    } catch (e) {
      print('‚ùå L·ªói khi crop ·∫£nh: $e');
      _showError('Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh: $e');
    }
  }

  /// Upload ·∫£nh l√™n YOLO service v√† nh·∫≠n di·ªán
  Future<void> _uploadAndDetect() async {
    if (_image.value == null) return;

    _isLoading.value = true;

    try {
      print('‚ö° B·∫Øt ƒë·∫ßu g·ª≠i ·∫£nh ƒë·∫øn YOLO service...');

      // Get backend URL (auto-detect emulator/real device)
      final baseUrl = PlatformDetector.getBackendUrl(
        localIp: '192.168.0.102', // TODO: Replace with your machine IP
        port: 8001,
        useHttps: false,
      );

      final uri = Uri.parse('$baseUrl/predict');

      var request = http.MultipartRequest('POST', uri);
      request.files.add(
        await http.MultipartFile.fromPath(
          'file',
          _image.value!.path,
        ),
      );

      print('‚ö° ƒêang g·ª≠i ·∫£nh: ${_image.value!.path}');
      print('‚ö° API URL: $uri');

      var response = await request.send();
      var responseData = await response.stream.bytesToString();

      print('‚ö° Response Data: $responseData');

      var jsonResponse = jsonDecode(responseData);

      // Ki·ªÉm tra l·ªói
      if (jsonResponse.containsKey('error')) {
        _showError('L·ªói t·ª´ server: ${jsonResponse['error']}');
        return;
      }

      if (!jsonResponse.containsKey('processed_image_url') ||
          !jsonResponse.containsKey('detections')) {
        _showError('API kh√¥ng tr·∫£ v·ªÅ ƒë·ªß d·ªØ li·ªáu');
        return;
      }

      // Extract detected words
      Set<String> detectedWords = {};
      for (var detection in jsonResponse['detections']) {
        detectedWords.add(detection['class']);
      }

      String processedImageUrl = jsonResponse['processed_image_url'];

      print('‚úÖ Nh·∫≠n di·ªán ƒë∆∞·ª£c ${detectedWords.length} t·ª´ v·ª±ng');
      print('‚úÖ URL ·∫£nh ƒë√£ x·ª≠ l√Ω: $processedImageUrl');

      // Navigate to result page
      Get.toNamed(
        Routes.detectionResult,
        arguments: {
          'detectedImageUrl': processedImageUrl,
          'words': detectedWords.toList(),
          'originalImage': _image.value,
        },
      );
    } catch (e) {
      print('‚ùå L·ªói khi g·ª≠i ·∫£nh: $e');
      _showError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server: $e');
    } finally {
      _isLoading.value = false;
    }
  }

  void _showError(String message) {
    Get.snackbar(
      'L·ªói',
      message,
      snackPosition: SnackPosition.BOTTOM,
      backgroundColor: Colors.red,
      colorText: Colors.white,
      duration: const Duration(seconds: 3),
    );
  }
}
